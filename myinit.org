#+STARTUP: overview 
#+PROPERTY: header-args :comments yes :results silent
* Changelog
** TODO
*** Things to learn
   - [ ] Org-roam
   - [ ] Helm
   - [ ] Company
   - [ ] Key bindings

** [2021-07-18 Sun]
   - New file which is self-documenting.  Let's try this out for now.
   - Updated some things to do use-package.
     - Update stuff to all use that.
       - Have a basic understanding now.
     
**  Reference
   - [[https://github.com/zamansky/using-emacs][zamansky github]] -> inspiration. for the myinit.org method.
   - [[https://youtu.be/EX9PKK3EMaw][zamansky video]]  -> video of the above.

* Systems  
** General Adjustments
 #+begin_src emacs-lisp
 ;;; Visual Stuff
 ;;;; No Bars n stuff
 (menu-bar-mode -1)
 (tool-bar-mode -1)
 #+end_src
** Mac Specific
  - Found this one.  Has to do with keys.
  #+begin_src emacs-lisp
  (setq mac-option-modifier 'super)
  (setq mac-command-modifier 'meta)
  #+end_src

** Buffer Management
   - This is likely to go away when I figure out helm stuff.
   #+begin_src emacs-lisp
;;; Buffer Management
(global-set-key "\C-x\C-b" 'electric-buffer-list)
   #+end_src
** Security
#+begin_src emacs-lisp
  (setq epa-pinentry-mode 'loopback)
  (setq auth-sources '("~/.authinfo.gpg"))
  (setq auth-source-debug t)
#+end_src
** Backup Files
  - I found this to be pretty helpful and of sufficient paranoia.
  #+begin_src emacs-lisp
    (use-package backup-each-save
      :config
      (setq make-backup-files nil)
      :hook
      (add-hook 'after-save-hook 'backup-each-save)
    )
  #+end_src  
** Repositories
   #+begin_src emacs-lisp
     (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/")t)
     (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
   #+end_src
* Applications
** Org Mode
   - org-tempo gets our template stuff back like "<s" , etc.
     
   #+begin_src emacs-lisp
     (use-package org-mode
       :hook
       (add-hook 'org-mode-hook 'turn-on-flyspell)
       :requires 
       (org-tempo)
     )
   #+end_src
** Org Roam
   - Very much a work in progress.
   #+begin_src emacs-lisp
	;;; org-roam
	;;;; v2 acknowledgement
	(use-package org-roam
	  :init
	  (setq org-roam-v2-ack t)
	  :config

	  (setq org-roam-directory "~/org-roam")
	  (setq org-roam-tag-sources '(prop all-directories))

	  ;; This option sounded interesting....
	  (setq org-roam-completion-everywhere t)

	  ;; Should I have a separate area for hooks instead of mixed up?
	  ;;(add-hook 'after-init-hook 'org-roam-mode)

	  ;; Make it such that saving updates the cache.
	  (setq org-roam-db-update-method 'immediate)

	  ;;; Buffer modes.
	  (setq org-roam-mode-sections
	      (list #'org-roam-backlinks-section
		    #'org-roam-reflinks-section
		    #'org-roam-unlinked-references-section
		    ))

	  ;;; Styling the buffer
	  (add-to-list 'display-buffer-alist
		       '(("\\*org-roam\\*"
			(display-buffer-in-direction)
			(direction . right)
			(window-width . 0.33)
			(window-height . fit-window-to-buffer))))

	  ;;; Capture  tmplate information
	  (setq org-roam-capture-templates
	  '(("d" "default" plain "%?"
	       :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
				  "#+title: ${title}\n")
	       :unnarrowed t))
	  )
	)
   #+end_src
** Magit

   #+begin_src emacs-lisp
     ;;; Magit/Github style stuff
     (use-package magit
       :config
       (setq magit-git-debug t)
       (setq password-cache nil)
       (setq magit-process-find-password-functions '(magit-process-password-auth-source))
       )

     (use-package magithub
       :after magit
       :ensure t
       :config (magithub-feature-autoinject t)
       )

     (use-package ghub
       :config
       (setq ghub-use-workaround-for-emacs-bug 'force)
     )


   #+end_src

