#+STARTUP: overview 
#+PROPERTY: header-args :comments yes :results silent
* Changelog
*** Things to learn
   - [X] Org-roam
   - [ ] Ivy
   - [ ] Company
   - [ ] Key bindings...

** [2021-07-18 Sun]
   - New file which is self-documenting.  Let's try this out for now.
   - Updated some things to do use-package.
     - Update stuff to all use that.
       - Have a basic understanding now.

**  Reference
   - [[https://github.com/zamansky/using-emacs][zamansky github]] -> inspiration. for the myinit.org method.
   - [[https://youtu.be/EX9PKK3EMaw][zamansky video]]  -> video of the above.
   - [[https://github.com/jwiegley/use-package][use-package]] -> I find myself here a lot learning about package stuff.

* Systems  
** General Adjustments
 #+begin_src emacs-lisp
   ;;; Visual Stuff
   ;;;; No Bars n stuff
   (menu-bar-mode -1)
   (tool-bar-mode -1)
   (setq inhibit-startup-screen t)
   (setq ring-bell-function 'ignore)
 #+end_src
** Mac Specific
  - Found this one.  Has to do with keys.
  #+begin_src emacs-lisp
    (use-package ns-win
      :config
      (setq mac-function-modifier 'control)
      (setq mac-option-modifier   'super)
      (setq mac-command-modifier  'meta)
    )
  #+end_src

** Buffer Management
   - This is likely to go away when I figure out helm stuff.
   #+begin_src emacs-lisp
     ;;; Buffer Management
     ;;;; Let's try this.
     (defalias 'list-buffers 'ibuffer)
   #+end_src
** Security
#+begin_src emacs-lisp
  (setq epa-pinentry-mode 'loopback)
  (setq auth-sources '("~/.authinfo.gpg"))
  (setq auth-source-debug t)
#+end_src
** Backup Files
  - I found this to be pretty helpful and of sufficient paranoia.
  #+begin_src emacs-lisp
    (use-package backup-each-save
      :config
      (setq make-backup-files nil)
      :hook
      (after-save backup-each-save)
    )
  #+end_src  
** Repositories
   #+begin_src emacs-lisp
     (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/")t)
     (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/") t)
   #+end_src
** Packages
   
#+begin_src emacs-lisp
  (use-package auto-package-update
    :config
    (auto-package-update-at-time "03:00")
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe))
#+end_src
   
* Applications
** Org Mode
   - org-tempo gets our template stuff back like "<s" , etc.
     
   #+begin_src emacs-lisp
     ;;(add-hook 'org-mode-hook 'turn-on-flyspell)
     (use-package org
       :hook
       (add-hook 'org-mode-hook #'turn-on-flyspell)
       :requires 
       (org-tempo)
     )
   #+end_src
** Org Roam
   - Very much a work in progress.
   - [2021-07-19 Mon] Consider making some stuff in config under :custom
   #+begin_src emacs-lisp
     ;;; org-roam
     ;;;; v2 acknowledgement
     (use-package org-roam
       :ensure t
       :init
       (setq org-roam-v2-ack t)

       :custom
       (setq org-roam-directory "~/org-roam")

       :config

       (setq org-roam-tag-sources '(prop all-directories))

       ;; This option sounded interesting....
       (setq org-roam-completion-everywhere t)

       ;; Should I have a separate area for hooks instead of mixed up?
       ;;(add-hook 'after-init-hook 'org-roam-mode)

       ;; Make it such that saving updates the cache.
       (setq org-roam-db-update-method 'immediate)

       ;;; Buffer modes.
       (setq org-roam-mode-sections
	   (list #'org-roam-backlinks-section
		 #'org-roam-reflinks-section
		 #'org-roam-unlinked-references-section
		 ))

       ;;; Styling the buffer
       (add-to-list 'display-buffer-alist
		    '(("\\*org-roam\\*"
		     (display-buffer-in-direction)
		     (direction . right)
		     (window-width . 0.33)
		     (window-height . fit-window-to-buffer))))

       ;;; Dailies
       (setq org-roam-dailies-directory "daily/")
       (setq org-roam-dailies-capture-templates
	     '(("d" "default" entry
	      "* %?"
	      :if-new (file+head "%<%Y-%m-%d>.org"
				 "#+title: %<%Y-%m-%d>\n"))))
       
       (org-roam-setup)

       :bind (
	      ("C-c n l" . org-roam-buffer-toggle)
	      ("C-c n f" . org-roam-node-find)
	      ("C-c n g" . org-roam-graph)
	      ("C-c n i" . org-roam-node-insert)
	      ("C-c n c" . org-roam-capture)
	      ;; Nodes
	      ("C-c n a" . org-roam-tag-add)
	      ;; Dailies
	      ("C-c n j" . org-roam-dailies-goto-today))

       ;; Templating stuff
       ;;; Capture template information
       ;;setq org-roam-capture-templates
       ;;     '(("d" "default" plain "%?"
       ;;	:if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
       ;;			   "#+title: ${title}\n")
       ;;	:unnarrowed t)))
       ;;(setq org-roam-capture-templates
       ;;	'(("d" "default" plain "%?"
       ;;	  :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
       ;;			     "#+title: ${title}\n"))))

     )
   #+end_src
*** Vulpea
    - random package used to bring to the table new functions.
      #+begin_src emacs-lisp
	(use-package vulpea
	  :ensure t)
      #+end_src
** Ox-Hugo
   #+begin_src emacs-lisp
	  (use-package ox-hugo
	    :ensure t
	    :after ox
     )
   #+end_src 
** Magit
   #+begin_src emacs-lisp
     ;;; Magit/Github style stuff
     (use-package magit
       :config
       (setq magit-git-debug t)
       (setq password-cache nil)
       (setq magit-process-find-password-functions '(magit-process-password-auth-source))
       )

     (use-package magithub
       :after magit
       :ensure t
       :config (magithub-feature-autoinject t)
       )

     (use-package ghub
       :config
       (setq ghub-use-workaround-for-emacs-bug 'force)
     )


   #+end_src
** Ivy Mode
   - [2021-07-23 Fri] - Trying out ivy.  Using the following as reference: [[https://writequit.org/denver-emacs/presentations/2017-04-11-ivy.html][Writequit Write-up]]
     - Per the above docs
       =ivy-use-virtual-buffers=
         Add recent files and bookmarks to the ivy-switch-buffer
       =ivy-count-format=
         Displays the current and total number in the collection in the promp

     #+begin_src emacs-lisp
       (use-package ivy
	 :demand
	 :config
	 (setq ivy-use-virtual-buffers t
	       ivy-count-format "%d/%d "))


     #+end_src

